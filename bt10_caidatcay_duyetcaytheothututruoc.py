# -*- coding: utf-8 -*-
"""BT10_CaiDatCay_DuyetCayTheoThuTuTruoc

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/105L2mglcgKDOeSO0UpsaS87KAH2wO7nd
"""

#Cài đặt cây - duyệt cây theo thứ tự trước
class Node:
    """
    Class Node
    """
    def __init__(self, value):
        self.left = None
        self.data = value
        self.right = None

class Tree:
    """
    Cây lớp sẽ cung cấp một cây cũng như các chức năng tiện ích.
    """

    def createNode(self, data):
        """
        Chức năng tiện ích để tạo một nút.
        """
        return Node(data)

    def insert(self, node , data):
        """
        Hàm Insert sẽ chèn một nút vào cây.
         Các khóa trùng lặp không được phép. 
        """
        #nếu cây trống, trả về một nút gốc
        if node is None:
            return self.createNode(data)
        # nếu dữ liệu nhỏ hơn dữ liệu gốc, hãy chèn nó vào bên trái
        if data < node.data:
            node.left = self.insert(node.left, data)
        elif data > node.data:
            node.right = self.insert(node.right, data)

        return node


    def search(self, node, data):
        """
        Chức năng tìm kiếm sẽ tìm kiếm một nút thành cây.
        """
        # nếu root là Không có hoặc root là dữ liệu tìm kiếm.
        if node is None or node.data == data:
            return node

        if node.data < data:
            return self.search(node.right, data)
        else:
            return self.search(node.left, data)



    def deleteNode(self,node,data):
        """
       Chức năng Delete sẽ xóa một nút thành cây. Chưa hoàn tất, 
       có thể cần thêm một số kịch bản mà chúng tôi có thể xử lý Bây giờ nó chỉ xử lý lá. 
        """

        # Check if tree is empty.
        if node is None:
            return None

       
        if data < node.data:
            node.left = self.deleteNode(node.left, data)
        elif data > node.data:
            node.right = self.deleteNode(node.right, data)
        else: 
            if node.left is None and node.right is None:
                del node
            if node.left == None:
                temp = node.right
                del node
                return  temp
            elif node.right == None:
                temp = node.left
                del node
                return temp

        return node






    def traversePreorder(self, root):
        """
        hàm traverse sẽ in tất cả các nút trong cây.
        """
        if root is not None:
            print(root.data)
            self.traversePreorder(root.left)
            self.traversePreorder(root.right)


def main():
    root = None
    tree = Tree()
    root = tree.insert(root, 10)
    print(root)
    tree.insert(root, 20)
    tree.insert(root, 30)
    tree.insert(root, 40)
    tree.insert(root, 70)
    tree.insert(root, 60)
    tree.insert(root, 80)

    print ("Traverse Preorder")
    tree.traversePreorder(root)


if __name__ == "__main__":
    main()