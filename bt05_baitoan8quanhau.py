# -*- coding: utf-8 -*-
"""BT05_BaiToan8QuanHau

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-P5EZcM6WWy1SpjSVoyQBw7EFYyGGl7
"""

"""bài toán n quân hậu."""
class NQueens:
    """tạo những trường hợp hợp lệ cho bài toán n quân hậu"""
    def __init__(self, size):
        #Lưu trữ kích thước câu đố (vấn đề) và số lượng các giải pháp hợp lệ.
        self.size = size
        self.solutions = 0
        self.solve()

    def solve(self):
        """Giải bài toán n q.hậu và in ra số lời giải"""
        positions = [-1] * self.size
        self.put_queen(positions, 0)
        print("Found", self.solutions, "solutions.")

    def put_queen(self, positions, target_row):
        """
        Cố gắng đặt một q.hậu trên target_row bằng cách kiểm tra tất cả N trường hợp có thể xảy ra.
        Nếu một địa điểm hợp lệ được tìm thấy, hàm tự gọi nó đang cố gắng đặt một q.hậu
        trên hàng tiếp theo cho đến khi tất cả N quân hậu được đặt trên bảng NxN. 
        """
        # Trường hợp cơ sở (dừng) - tất cả N hàng đều được sử dụng.
        if target_row == self.size:
            self.show_full_board(positions)
            # self.show_short_board(positions)
            self.solutions += 1
        else:
            # Đối với tất cả N vị trí cột, hãy cố gắng đặt một q.hậu
            for column in range(self.size):
                # Từ chối tất cả các vị trí(positions) không hợp lệ
                if self.check_place(positions, target_row, column):
                    positions[target_row] = column
                    self.put_queen(positions, target_row + 1)


    def check_place(self, positions, ocuppied_rows, column):
        """
        Kiểm tra xem một vị trí nhất định có bị tấn công từ bất kỳ quân hậu đã đặt trước đó hay không (kiểm tra vị trí cột và đường chéo)
        """
        for i in range(ocuppied_rows):
            if positions[i] == column or \
                positions[i] - i == column - ocuppied_rows or \
                positions[i] + i == column + ocuppied_rows:

                return False
        return True

    def show_full_board(self, positions):
        """Show the full NxN board"""
        for row in range(self.size):
            line = ""
            for column in range(self.size):
                if positions[row] == column:
                    line += "Q "
                else:
                    line += ". "
            print(line)
        print("\n")

    def show_short_board(self, positions):
        """
        Hiển thị các vị trí quân hậu trên bảng ở dạng nén, mỗi số đại diện cho vị trí cột bị chiếm trong hàng tương ứng.
        """
        line = ""
        for i in range(self.size):
            line += str(positions[i]) + " "
        print(line)

'Khởi tạo và giải bài toán n nữ hoàng'
NQueens(8)